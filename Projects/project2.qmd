---
title: "Client Report - [Late flights and missing data(JSON files)]"
subtitle: "Course DS 250"
author: "[Ana Soto]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---
     
```{python}

import pandas as pd
import numpy as np
import plotly.express as px

```


## Elevator pitch

_paste your elevator pitch here_
_A SHORT (4-5 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._

```{python}
#| label: project data
#| code-summary: Read and format project data
# Include and execute your code here
df = pd.read_json("https://raw.githubusercontent.com/byuidatascience/data4missing/master/data-raw/flights_missing/flights_missing.json")

```


## QUESTION 1

__Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”).__

_To start, I familiarized myself with the data, and during this process, I identified weird values such as '-999', 'n/a', '1500+', and misspellings like 'Feburary'. These weird values could affect the accuracy of future calculations. So, I replaced these values with appropriate values, ensuring cleanliness and organization in the dataset. Additionally, I addressed any blank spaces, ensuring the data was properly formatted._

```{python}
#| label: Q1
#| code-summary: Read and format data
# Include and execute your code here

df.isnull().sum()

#Looking into the year column
df['year'].unique()

#Looking into 'minutes_delayed_carrier'
df['minutes_delayed_carrier'].unique()

#Looking into 'minutes_delayed_nas'
df['minutes_delayed_nas'].unique()

#Looking into 'num_of_delays_late_aircraft'
df['num_of_delays_late_aircraft'].unique()

#Looking into 'month'
df['month'].unique()

```

_ After cleaning and replacing incorrect values, I still had to deal with missing data (NA's). Instead of dropping these rows, I calculated the average number of delays and replaced the NA's with this value. This approach maintains the dataset's integrity while ensuring that future calculations have a more accurate representation of the data. _

```{python}

df.replace({
    -999: np.nan,
    'n/a': np.nan,
    'Febuary': 'February',
    '': np.nan,
    '1500+': 1500
}, inplace=True)

df = df.query("month != 'na'")

avg_delay = df['num_of_delays_late_aircraft'].mean()

df['num_of_delays_late_aircraft'].replace(np.nan, avg_delay, inplace=True)
```


```{python}

df.iloc[2]  # third row (index 2)

```


## QUESTION 2

__Which airport has the worst delays?__

_The metric I decided, for the "worst" delayed airport,is a percentage of delayed flights. According to my findings, the San Francisco Internation aiport (SFO) has the worst delays out of these airports. As it has an average delay time of 201,140 minutes or 3,352 hours._

```{python}

q2 = (df.groupby('airport_code').agg(
total_flights=('num_of_flights_total', 'sum'),
delayed_flights=('num_of_delays_total', 'sum'),
avg_delay_time=('minutes_delayed_total', 'mean')))

q2['avg_delay_hours'] = q2['avg_delay_time'] / 60


q2['is_delayed'] = q2['delayed_flights'] / q2['total_flights'] *100

q2 = q2.sort_values(by='is_delayed', ascending=False)

# table
print(q2)

```


## QUESTION 3

__What is the best month to fly if you want to avoid delays of any length?__

_
September stands out as the top choice for travel if you aim to avoid flight delays. Because only around 16.5% of flights experience delays during this month._

```{python}

df_cleaned = df.dropna(subset=['month'])

q3 = df.groupby('month').agg(
    total_flights=('num_of_flights_total', 'sum'),
    delayed_flights=('num_of_delays_total', 'sum')
)

#proportion
q3['is_delayed'] = q3['delayed_flights'] / q3['total_flights']*100

```


```{python}

months_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
q3 = q3.reindex(months_order)

q3_visual = px.bar(q3, x=q3.index, y='is_delayed', 
                   color='is_delayed',
                   labels={'is_delayed': 'Delayed Percentage'},
                   title='Proportion of Delayed Flights by Month')
q3_visual.update_layout(xaxis_title='Month', yaxis_title='Proportion of Delayed Flights')

q3_visual.show()

```


## QUESTION 4

__Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild).__

_The columns created in this question offer valuable insights. By looking at the two columns, we gain more detailed information about the types of weather delays. The 'mild' weather column accounts for 30% of flight delays, while the 'NAS' category exhibits variation based on the month. Specifically, during certain months, it affects 40% of flight delays, while outside of these months, the percentage rises to 65%._

```{python}

q4 = df.assign(
mild_weather_delays = df.num_of_delays_late_aircraft * 0.3,
nas_weather_delays = np.where(
    df.month.isin(['April', 'May', 'June', 'July' 'August']),
    df.num_of_delays_nas * 0.4,
    df.num_of_delays_nas * 0.65))

```

_For example, take a look at Atlanta International Airport, there were 332 flights delayed due to mild weather conditions, while nearly 3000 flights were delayed based on the NAS category._

```{python}

q4.head()

```


## QUESTION 5

__Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Discuss what you learn from this graph.__

_The visualization reveals that weather-related delays are most prevalent at O'Hare International aiport (ORD), Sand Diego International aiport (SAN), and the Atlanta International aiport (ATL), with ORD experiencing the highest proportion of these types of delays._

```{python}

q4['total_weather_delays'] = q4['nas_weather_delays'] + q4['mild_weather_delays']

total_flights = df.groupby('airport_code')['num_of_flights_total'].sum().reset_index()

q5 = q4.merge(total_flights, on='airport_code', how='left')
q5['is_delayed_by_weather'] = (q5['total_weather_delays'] / total_flights['num_of_flights_total'])*100

```


```{python}

q5_visual = px.bar(q5, x='airport_code', y='is_delayed_by_weather',
title='Proportion of Flights Delayed by Weather at Each Airport',
labels={'weather_delay_proportion': 'Proportion of Flights Delayed by Weather', 'airport': 'Airport'})
q5_visual.update_xaxes(title_text='Airport')
q5_visual.update_yaxes(title_text='Proportion of Flights Delayed by Weather')

q5_visual.show()

```

